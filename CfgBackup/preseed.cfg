# Preseed configuration for knarr.star server
# Locale and language
d-i debian-installer/locale string en_US.UTF-8
d-i keyboard-configuration/xkb-keymap select us

# Network configuration - Auto DHCP during installation
d-i netcfg/choose_interface select auto
d-i netcfg/get_hostname string knarr
d-i netcfg/get_domain string knarr.star

# Early command - Prepare disks for automated RAID setup
d-i preseed/early_command string \
  apt-get update; \
  apt-get install -y mdadm parted; \
  wipefs -a /dev/sda; wipefs -a /dev/sdb; \
  mdadm --zero-superblock /dev/sda 2>/dev/null || true; \
  mdadm --zero-superblock /dev/sdb 2>/dev/null || true; \
  echo "=== PREPARING DISKS FOR AUTOMATED RAID1 SETUP ==="; \
  lsblk; \
  echo "Disks prepared for automatic RAID1 configuration."

# Mirror settings
d-i mirror/country string manual
d-i mirror/http/hostname string deb.debian.org
d-i mirror/http/directory string /debian
d-i mirror/http/proxy string
d-i apt-setup/use_mirror boolean true

# Repository configuration
d-i apt-setup/local0/repository string deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
d-i apt-setup/local0/comment string Debian bookworm main, contrib, non-free, and non-free-firmware
d-i apt-setup/local0/source boolean true
d-i apt-setup/security_updates boolean true
d-i apt-setup/security_main string deb http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware
d-i apt-setup/security_source boolean true

# Clock and time zone
d-i clock-setup/utc boolean true
d-i time/zone string UTC

# Partitioning - Automated RAID1 setup
d-i partman-auto/method string raid
d-i partman-auto/disk string /dev/sda /dev/sdb

# Remove any existing RAID or LVM configurations
d-i partman-md/device_remove_md boolean true  
d-i partman-lvm/device_remove_lvm boolean true

# Partition recipe for RAID1 - /boot and / only, no swap
d-i partman-auto/expert_recipe string \
  boot-root :: \
    512 1 512 raid \
      $primary{ } method{ raid } \
    . \
    1000 2 -1 raid \
      $primary{ } method{ raid } \
    .

# RAID configuration - RAID1 arrays
d-i partman-auto-raid/recipe string \
  1 2 0 ext4 /boot /dev/sda1#/dev/sdb1 . \
  1 2 0 ext4 / /dev/sda2#/dev/sdb2 .

# Auto-confirm partitioning
d-i partman-md/confirm boolean true
d-i partman-md/confirm_nooverwrite boolean true
d-i partman/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true

# Explicitly disable swap
d-i partman-basicfilesystems/no_swap boolean false

# Root password (hashed with SHA-512, replace with your generated hash)
d-i passwd/root-password-crypted string $changeme

# Create heimdall user
d-i passwd/user-fullname string heimdall
d-i passwd/username string heimdall
d-i passwd/user-password-crypted string $changeme
d-i passwd/user-default-groups string sudo,adm,systemd-journal

# Package selection - Disable tasksel, rely on late_command for package installation
d-i pkgsel/run_tasksel boolean false
d-i pkgsel/upgrade select full-upgrade
d-i pkgsel/update-policy select none
d-i pkgsel/include-install-recommends boolean false

# Additional exclusions to ensure no GUI components are installed
d-i base-installer/kernel/override-image string linux-server

# Bootloader (GRUB) - Install on both drives for redundancy
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean false
d-i grub-installer/bootdev string /dev/sda /dev/sdb

# Late command - Complete server setup
d-i preseed/late_command string \
  echo "=== KNARR SERVER SETUP START ===" | tee /target/root/setup.log; \
  echo "$(date): Starting post-installation configuration" | tee -a /target/root/setup.log; \
  \
  echo "--- Updating package repositories ---" | tee -a /target/root/setup.log; \
  in-target apt-get update | tee -a /target/root/setup.log; \
  \
  echo "--- Installing essential packages ---" | tee -a /target/root/setup.log; \
  in-target apt-get install -y \
    curl wget vim nano htop iotop \
    net-tools dnsutils \
    fail2ban ufw \
    git rsync \
    build-essential \
    python3 python3-pip \
    nodejs npm \
    nginx \
    postgresql postgresql-contrib \
    redis-server \
    certbot python3-certbot-nginx \
    docker.io docker-compose \
    | tee -a /target/root/setup.log; \
  \
  echo "--- Configuring firewall (UFW) ---" | tee -a /target/root/setup.log; \
  in-target ufw --force enable | tee -a /target/root/setup.log; \
  in-target ufw default deny incoming | tee -a /target/root/setup.log; \
  in-target ufw default allow outgoing | tee -a /target/root/setup.log; \
  in-target ufw allow ssh | tee -a /target/root/setup.log; \
  in-target ufw allow 80/tcp | tee -a /target/root/setup.log; \
  in-target ufw allow 443/tcp | tee -a /target/root/setup.log; \
  \
  echo "--- Configuring SSH security ---" | tee -a /target/root/setup.log; \
  echo "PermitRootLogin no" >> /target/etc/ssh/sshd_config; \
  echo "PasswordAuthentication no" >> /target/etc/ssh/sshd_config; \
  echo "PubkeyAuthentication yes" >> /target/etc/ssh/sshd_config; \
  echo "MaxAuthTries 3" >> /target/etc/ssh/sshd_config; \
  echo "ClientAliveInterval 300" >> /target/etc/ssh/sshd_config; \
  echo "ClientAliveCountMax 2" >> /target/etc/ssh/sshd_config; \
  \
  echo "--- Setting up Docker permissions ---" | tee -a /target/root/setup.log; \
  in-target usermod -aG docker heimdall | tee -a /target/root/setup.log; \
  \
  echo "--- Configuring static network (replace with your settings) ---" | tee -a /target/root/setup.log; \
  cat > /target/etc/systemd/network/10-static.network << 'EOF'
[Match]
Name=en*

[Network]
DHCP=no
Address=192.168.1.100/24
Gateway=192.168.1.1
DNS=8.8.8.8
DNS=8.8.4.4

[Route]
Gateway=192.168.1.1
EOF
  \
  echo "--- Enabling systemd-networkd ---" | tee -a /target/root/setup.log; \
  in-target systemctl enable systemd-networkd | tee -a /target/root/setup.log; \
  in-target systemctl disable networking | tee -a /target/root/setup.log; \
  \
  echo "--- Creating deployment directory structure ---" | tee -a /target/root/setup.log; \
  in-target mkdir -p /opt/knarr/{apps,data,logs,backups} | tee -a /target/root/setup.log; \
  in-target chown -R heimdall:heimdall /opt/knarr | tee -a /target/root/setup.log; \
  \
  echo "--- Setting up basic nginx configuration ---" | tee -a /target/root/setup.log; \
  cat > /target/etc/nginx/sites-available/knarr.star << 'EOF'
server {
    listen 80;
    server_name knarr.star www.knarr.star;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name knarr.star www.knarr.star;
    
    # SSL configuration (certificates will be added later with certbot)
    # ssl_certificate /etc/letsencrypt/live/knarr.star/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/knarr.star/privkey.pem;
    
    root /opt/knarr/apps/web;
    index index.html index.htm;
    
    location / {
        try_files $uri $uri/ =404;
    }
    
    # Proxy to application if needed
    # location /api/ {
    #     proxy_pass http://localhost:3000;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    # }
}
EOF
  \
  in-target ln -sf /etc/nginx/sites-available/knarr.star /etc/nginx/sites-enabled/ | tee -a /target/root/setup.log; \
  in-target rm -f /etc/nginx/sites-enabled/default | tee -a /target/root/setup.log; \
  \
  echo "--- Creating basic web content ---" | tee -a /target/root/setup.log; \
  in-target mkdir -p /opt/knarr/apps/web | tee -a /target/root/setup.log; \
  cat > /target/opt/knarr/apps/web/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Knarr Server</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 800px; margin: 0 auto; }
        .status { background: #e8f5e8; padding: 20px; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸš¢ Knarr Server</h1>
        <div class="status">
            <h2>Server Status: Online</h2>
            <p>The Knarr server has been successfully deployed and is ready for configuration.</p>
            <p>Installation completed on: <script>document.write(new Date().toLocaleString());</script></p>
        </div>
        <h3>Next Steps:</h3>
        <ul>
            <li>Configure SSL certificates with Let's Encrypt</li>
            <li>Set up your applications in /opt/knarr/apps/</li>
            <li>Configure database connections</li>
            <li>Deploy your services</li>
        </ul>
    </div>
</body>
</html>
EOF
  \
  in-target chown -R heimdall:heimdall /opt/knarr | tee -a /target/root/setup.log; \
  \
  echo "--- Creating post-install script for first boot ---" | tee -a /target/root/setup.log; \
  cat > /target/root/first-boot-setup.sh << 'EOF'
#!/bin/bash
# First boot setup script

echo "=== FIRST BOOT SETUP ===" | tee -a /root/first-boot.log
echo "$(date): Running first boot configuration" | tee -a /root/first-boot.log

# Start and enable services
systemctl enable --now nginx
systemctl enable --now postgresql
systemctl enable --now redis-server
systemctl enable --now docker
systemctl enable --now fail2ban

# Configure PostgreSQL
sudo -u postgres createuser heimdall
sudo -u postgres createdb knarr_db -O heimdall

# Generate SSH key for heimdall user if not exists
if [ ! -f /home/heimdall/.ssh/id_rsa ]; then
    sudo -u heimdall ssh-keygen -t rsa -b 4096 -f /home/heimdall/.ssh/id_rsa -N ""
    echo "SSH key generated for heimdall user" | tee -a /root/first-boot.log
fi

# Set up log rotation
cat > /etc/logrotate.d/knarr << 'LOGROTATE_EOF'
/opt/knarr/logs/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    create 644 heimdall heimdall
}
LOGROTATE_EOF

echo "First boot setup completed" | tee -a /root/first-boot.log

# Remove this script from startup after first run
systemctl disable first-boot-setup.service
rm /etc/systemd/system/first-boot-setup.service
rm /root/first-boot-setup.sh
EOF
  \
  in-target chmod +x /root/first-boot-setup.sh | tee -a /target/root/setup.log; \
  \
  echo "--- Creating systemd service for first boot ---" | tee -a /target/root/setup.log; \
  cat > /target/etc/systemd/system/first-boot-setup.service << 'EOF'
[Unit]
Description=First Boot Setup for Knarr Server
After=multi-user.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/root/first-boot-setup.sh
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF
  \
  in-target systemctl enable first-boot-setup.service | tee -a /target/root/setup.log; \
  \
  echo "--- Creating helpful aliases and environment ---" | tee -a /target/root/setup.log; \
  cat >> /target/home/heimdall/.bashrc << 'EOF'

# Knarr server aliases
alias ll='ls -la'
alias knarr-logs='tail -f /opt/knarr/logs/*.log'
alias knarr-status='systemctl status nginx postgresql redis-server docker'
alias knarr-deploy='cd /opt/knarr && docker-compose'

# Environment variables
export KNARR_HOME=/opt/knarr
export PATH=$PATH:/opt/knarr/bin
EOF
  \
  echo "--- Final system configuration ---" | tee -a /target/root/setup.log; \
  echo "vm.swappiness=10" >> /target/etc/sysctl.conf; \
  echo "net.core.rmem_max=16777216" >> /target/etc/sysctl.conf; \
  echo "net.core.wmem_max=16777216" >> /target/etc/sysctl.conf; \
  \
  echo "$(date): Knarr server setup completed successfully!" | tee -a /target/root/setup.log; \
  echo "=== KNARR SERVER SETUP END ===" | tee -a /target/root/setup.log

# Finish installation
d-i finish-install/reboot_in_progress note
